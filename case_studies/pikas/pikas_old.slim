initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeTreeSeq();

	if (!exists("seed")) {
		seed = getSeed();
	}
	if (!exists("NUMGENS")) {
		defineConstant("NUMGENS", 1400);
	}
	if (!exists("W")) {
		defineConstant("W", 16299);  // width of the simulated area 
	}
	if (!exists("OUTPATH")) {
		defineConstant("OUTPATH", "test_flat_map." + NUMGENS + "." + seed + ".trees");
	}
	if (!exists("SIGMA")) {
		defineConstant("SIGMA", 93.20466); // 93.20466
	}
	if (!exists("SD")) {
		defineConstant("SD", SIGMA);
	}
	if (!exists("SI")) {
		defineConstant("SI", SIGMA);
	}
	if (!exists("K")) {
		defineConstant("K", 2.5e-4);  // carrying-capacity per unit square (roughly). 2.5e-4
	}
	if (!exists("BURNIN")) {
		defineConstant("BURNIN", 0);  // number of ticks before full recording begins
	}

	catn(c("NUMGENS =", NUMGENS));
	catn(c("BURNIN =", BURNIN));
	catn(c("W =", W));
	catn(c("SIGMA =", SIGMA));
	catn(c("K =", K));
	defineConstant("A", 1.0);  // height/width of the simulated area
	catn(c("A =", A));
	catn(c("SD =", SD));
	catn(c("SI =", SI));
	defineConstant("SM", SIGMA);  // sigma_M, the mate choice distance
	catn(c("SM =", SM));
	defineConstant("L", 3.25);    // mean lifetime at stationarity
	catn(c("L =", L));
	defineConstant("G", 2e9);  // genome length
	catn(c("G =", G));
	defineConstant("FECUN", 1/L); // mean fecundity
	catn(c("FECUN =", FECUN));
	defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function

	initializeMutationType("m1", 0.5, "g", 0.0, 2);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, G-1);
	initializeMutationRate(0.0);
	initializeRecombinationRate(1e-9);

	// elevation params
	defineConstant("DISPERSAL_MAP_FILE", "./e_mat.png");
	defineConstant("dispersal_map", Image(DISPERSAL_MAP_FILE));
	//defineConstant("width", dispersal_map.width); 
	//defineConstant("height", dispersal_map.height); 
	defineConstant("width", 16299); // meters
	defineConstant("height", 16299);

	elevation_range = c(7539, 13507); // elevation (ft) from map legend
	elevation_range = elevation_range * 3.048e-4; // $ convert to km
	defineGlobal("Elevation", dispersal_map.floatK * (elevation_range[1]-elevation_range[0]) + elevation_range[0]);
	defineGlobal("Temperature", -10 * Elevation + 37); // estimate temperature from elevation (Collados-Lara AJ et al., 2020)

        // spatial competition
        initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
        i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);

        // mate choice
        initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
        i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);
}

1 early() {
        sim.addSubpop("p1", asInteger(K * width * height));
        p1.setSpatialBounds(c(0, 0, width, height));
        p1.defineSpatialMap("elevation", "xy", dispersal_map.floatK, interpolate=T, valueRange=c(0,1), colors=c("#0000FF", "#FFFFFF")); // this map is (only) for visualizing elevation in the GUI
        // random initial positions
        for (ind in p1.individuals) {
                ind.setSpatialPosition(p1.pointUniform());
                ind.tag = 0;
        }
        i1.evaluate(sim.subpopulations);

        community.rescheduleScriptBlock(s99, ticks=BURNIN + NUMGENS);

        // header info
        cat("gen" + " " + "stage" + " ");
        cat("pop_size" + " " + "births" + " ");
        cat("age" + " " + "density" + " ");
        catn("neighbor" + " " + "harm_neigh" + " " + "num_off" + " " + "time");
}

reproduction() {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		// record number of offspring in the tag
		individual.tag = individual.tag + nOff;
		for (i in seqLen(rpois(1, 1/L))) {
			pos = individual.spatialPosition + rnorm(2, 0, SD);
			if (p1.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(p1.pointReflected(pos));
				offspring.tag = 0;
			}
		}
	}
	return;
}

early() {
	// update temperature (0.016 / year; and assuming ticks are years, here)
	defineGlobal("Temperature", Temperature + 0.016); // increase global temperature

	// random noise: each year can be a 'hot' or 'cold' year 
	s = 2; // between-year std dev   *** NEED REFERENCE ***
	annual_stddev = rnorm(1,0,s);
	
///////////////////////////////////////////////////////////////
	defineGlobal("Temperature", Temperature + annual_stddev); // increase global temperature

	p1.defineSpatialMap("Temperature", "xy", Temperature, interpolate=T, valueRange=c(0,1), colors=c("#FFFFFF", "#0000FF"));
////////////////////////////////////////////////////////////////
//	p1.defineSpatialMap("Temperature", "xy", Temperature + annual_stddev, interpolate=T, valueRange=c(0,1), colors=c("#FFFFFF", "#0000FF"));
////////////////////////////////////////////////////////////////

	print("");
	print(c("sim cycle:", sim.cycle, "Temperature:", range(Temperature)));

	// calculate % habitable space
	// without stochasticity
	mydata = c(p1.individualCount, sum((Temperature)>(-5.0 + 6.830664) & (Temperature)<(28 - 4.97887)) / length(Temperature));
	// with stochasticity
	//mydata = c(p1.individualCount, sum((Temperature+annual_stddev)>(-5.0 + 6.830664) & (Temperature+annual_stddev)<(28 - 4.97887)) / length(Temperature));
	writeFile("./pika_simdata.txt", paste(mydata, sep='\t'), append=T);

}

early() {
	i1.evaluate(p1);
	inds = p1.individuals;
	competition = i1.localPopulationDensity(inds);

	// record strength of competition in the tagF
	inds.tagF = competition;
	inds.fitnessScaling = 1/(1 + RHO * competition);

	// kill indivs. outside optimal temperature range
	locations = inds.spatialPosition; //[ rep(c(T,T), inds.size()) ];     
	individual_temperatures = p1.spatialMapValue("Temperature", locations);
	for (i in 0:(length(individual_temperatures)-1))
	{
		if (individual_temperatures[i] < (-5.0 + 6.830664)) // range from Beever et al, 2010; includes adjustment for winter cold
		{
			inds[i].fitnessScaling = 0;
		}
		if (individual_temperatures[i] > (28 - 4.97887)) // includes adjustment for summer heat
		{
			inds[i].fitnessScaling = 0;
		}
	}
}

1: late() {
	// to be ready for mate choice
	i2.evaluate(p1);
}

2: late() {
	// GUI COLORS
	//  green = many neighbors, few offspring so far
	//  red = many offspring so far, few neighbors
	//  yellow = many offspring so far, many neighbors
	max_n = max(1, max(p1.individuals.tag));
	max_f = max(0.01, max(p1.individuals.tagF));
	max_a = max(p1.individuals.age);
	for (ind in p1.individuals) {
		ind.color = rgb2color(c(ind.tag/max_n, ind.tagF/max_f, ind.age/max_a));
	}
}

s99 1400 late() {
	sim.treeSeqOutput(OUTPATH, simplify=F);
	sim.simulationFinished();
}