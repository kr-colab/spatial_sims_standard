initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");

	initializeTreeSeq();
	initializeSex("A");	// individuals are either male or female (dioecy)
	
	defaults = Dictionary(
		"SEED", getSeed(),
		"SD", 0.3,	// sigma_D, dispersal distance
		"SX", 0.3,	// sigma_X, interaction distance for measuring local density
		"SM", 0.3,	// sigma_M, mate choice distance
		"K", 5,	// carrying capacity per unit area
		"LIFETIME", 4,	// average life span in ticks
		"WIDTH", 25.0,	// width of the simulated area
		"HEIGHT", 25.0,	// height of the simulated area
		"RUNTIME", 200,	// total number of ticks to run the simulation for
		"L", 1e8,	// genome length
		"R", 1e-8,	// recombination rate
		"MU", 0	// mutation rate
		);

	// Set up parameters with a user-defined function
	setupParams(defaults);
	
	// Set up constants that depend on externally defined parameters
	defineConstant("FECUN", 1 / LIFETIME);
	defineConstant("RHO", FECUN / ((1 + FECUN) * K));
	defineGlobal("PARAMS", defaults);
	
	setSeed(SEED);
	
	// basic neutral genetics
	initializeMutationRate(MU);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(R);

	// spatial interaction for local density measure
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3 * SX);
	i1.setInteractionFunction("n", 1, SX);

	// mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3 * SM);
	i2.setInteractionFunction("n", 1, SM);

	// model female choosiness
	i2.setConstraints("receiver", sex="F");
	i2.setConstraints("exerter", sex="M");
}

1 first() {
	sim.addSubpop("p1", asInteger(K * WIDTH * HEIGHT));
	p1.setSpatialBounds(c(0, 0, WIDTH, HEIGHT));
	p1.individuals.setSpatialPosition(p1.pointUniform(p1.individualCount));
	community.rescheduleScriptBlock(s1, ticks=RUNTIME);
}

first() {
	i2.evaluate(p1);  // evaluate mate choice interaction values
}

reproduction(NULL, "F") {	// females choose a male mate
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) 
		// fecundity is doubled because only females reproduce
		offspring = subpop.addCrossed(individual, mate, count=rpois(1, 2 * FECUN));
}

early() {
	// Disperse offspring
	offspring = p1.subsetIndividuals(maxAge = 0);
	pos = offspring.spatialPosition;
	pos = p1.pointDeviated(offspring.size(), pos, "reprising", INF, "n", SD);
	offspring.setSpatialPosition(pos);
	
	// Measure local density and use it for density regulation
	i1.evaluate(p1);
	inds = p1.individuals;
	competition = i1.localPopulationDensity(inds);
	inds.fitnessScaling = 1 / (1 + RHO * competition);
}

late() {
	if (p1.individualCount == 0) {
		catn("Population went extinct! Ending the simulation.");
		sim.simulationFinished();
	}
}

s1 late() {
	catn("End of simulation (run time reached)");
	sim.treeSeqOutput(OUTPATH, metadata=PARAMS);
	sim.simulationFinished();
}

function (void)setupParams(object<Dictionary>$ defaults)
{
	if (!exists("PARAMFILE")) defineConstant("PARAMFILE", "./params.json");
	if (!exists("OUTDIR")) defineConstant("OUTDIR", ".");
	defaults.addKeysAndValuesFrom(Dictionary("PARAMFILE", PARAMFILE, "OUTDIR", OUTDIR));
	
	if (fileExists(PARAMFILE)) {
		local_defaults = Dictionary(paste0(readFile(PARAMFILE)));
		defaults.addKeysAndValuesFrom(local_defaults);
		defaults.setValue("read_from_paramfile", PARAMFILE);
	}
	
	defaults.setValue("OUTBASE", OUTDIR + "/out_" +	defaults.getValue("seed"));
	defaults.setValue("OUTPATH", defaults.getValue("OUTBASE") + ".trees");
	
	for (k in defaults.allKeys) {
		if (!exists(k))
			defineConstant(k, defaults.getValue(k));
		else
			defaults.setValue(k, executeLambda(paste(c(k, ";"), sep='')));
	}
	
	// print out default values
	catn("===========================");
	catn("Model constants: " + defaults.serialize());
	catn("===========================");
}