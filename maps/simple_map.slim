initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	// This model uses tree-sequence recording, but it is optional
	initializeTreeSeq();
	
	
	defaults = Dictionary(
		"seed", getSeed(),
		"SD", 0.3, // sigma_D, dispersal distance
		"SX", 0.3, // sigma_X, interaction distance for measuring local density
		"SM", 0.3, // sigma_M, mate choice distance
		"K", 5, // carrying capacity per unit area
		"LIFETIME", 4, // average life span
		"WIDTH", 25.0, // width of the simulated area
		"HEIGHT", 25.0, // height of the simulated area
		"RUNTIME", 300, // total number of ticks to run the simulation for
		"L", 1e8, // genome length
		"R", 1e-8, // recombination rate
		"MU", 0, // mutation rate
		"OUTDIR", exists("OUTDIR") ? OUTDIR else ".",
		"PARAMFILE", exists("PARAMFILE") ? PARAMFILE else "./params.json"
		);
	
	if (fileExists(defaults.getValue("PARAMFILE"))){
		local_defaults = Dictionary(paste(readFile(defaults.getValue("PARAMFILE")), sep="\n"));
		defaults.addKeysAndValuesFrom(local_defaults);
		defaults.setValue("read_from_paramfile", defaults.getValue("PARAMFILE"));
	}
	defaults.setValue("OUTBASE", defaults.getValue("OUTDIR") + "/out_" +	defaults.getValue("seed"));
	defaults.setValue("OUTPATH", defaults.getValue("OUTBASE") + ".trees");
	
	
	// Set up parameters with a user-defined function
	setupParams(defaults);
	
	// Set up constants that depend on externally defined parameters
	//if (!exists("outpath")) defineConstant("outpath", "~/Desktop/space_data/"); //for the files I want
	
	defineConstant("FECUN", 1 / LIFETIME);
	defineConstant("RHO", FECUN / ((1 + FECUN) * K));
	defineGlobal("PARAMS", defaults);
	
	//Maps
	defineConstant("min_l", 1.5); // how easly it is to live at the edge of the mountain 
	defineConstant("max_l", 3.0); // how difficult it is to live at the top of the mountain (white soace) 
	defineConstant("image_location", "maps/practice_maps/mountain_height.png"); // picture location
	
	setSeed(seed);
	
	initializeMutationRate(MU);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(R);
	
	// spatial interaction for local density measure
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3 * SX);
	i1.setInteractionFunction("n", 1, SX);
	// mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3 * SM);
	i2.setInteractionFunction("n", 1, SM);
}

1 first() {
	sim.addSubpop("p1", asInteger(K * WIDTH * HEIGHT));
	p1.setSpatialBounds(c(0, 0, WIDTH, HEIGHT));
	p1.individuals.setSpatialPosition(p1.pointUniform(p1.individualCount));
	community.rescheduleScriptBlock(s1, ticks=RUNTIME);
	mapImage = Image(image_location); // adding the image
	map_vals = (1-mapImage.floatK) *(max_l-min_l) + min_l; // defining values
	p1.defineSpatialMap("world", "xy", map_vals, valueRange=c(min_l, max_l), colors=c('#FFFFFF', '#000000'));
}

first() {
	// preparation for the reproduction() callback
	i2.evaluate(p1);
}

reproduction(){
	mate = i2.drawByStrength(individual, 1);
	if (mate.size())
		offsprings = subpop.addCrossed(individual, mate, count=rpois(1, FECUN));
}

early() {
	// Disperse offspring
	offspring = p1.subsetIndividuals(maxAge = 0);
	pos = offspring.spatialPosition;
	pos = p1.pointDeviated(offspring.size(), pos, "reprising", INF, "n", SD);
	offspring.setSpatialPosition(pos);
	
	// Measure local density and use it for density regulation
	i1.evaluate(p1);
	inds = p1.individuals;
	competition = i1.localPopulationDensity(inds);
	local_l = p1.spatialMapValue("world", inds.spatialPosition);
	inds.fitnessScaling = 1/(1 + (RHO * competition / local_l));
}

late() {
	if (p1.individualCount == 0) {
		catn("Population went extinct! Ending the simulation.");
		sim.simulationFinished();
	}
	i2.evaluate(p1);
	// Map outputs	
	inds = p1.individuals;
	
	ind_den = i2.localPopulationDensity(inds);
	local_l = p1.spatialMapValue("world", inds.spatialPosition);
	mapImage = Image(image_location);
	pixial = (local_l-min_l)/(max_l-min_l);
	top = min_l+ 0.75*(max_l - min_l);
	mid = min_l+ 0.50*(max_l - min_l);
	low = min_l+ 0.25*(max_l - min_l);
	
	top = sum (local_l >= top);
	mid_top = sum (local_l >= mid & local_l < top);
	mid_low = sum (local_l >= low & local_l < mid);
	low = sum (local_l <= low);
	
	defineGlobal("top", top);
	defineGlobal("mid_top", mid_top);
	defineGlobal("mid_low", mid_low);
	defineGlobal("low", low);
	
	mytextfile=OUTBASE+"by_ind_Ind_values_max_"+max_l+"_min_l_"+ min_l +"_.text";
	
	// prining out inforation at selected generations
	if ((sim.cycle % 200) == 0) {
		for(i in 0:(length(pixial)-1)){
			catn(pixial[i]);
			//writing info about density		
			mytextfileinfo = sim.cycle + ","  + asString(ind_den[i])+ "," + asString(pixial[i]);
			writeFile(mytextfile, mytextfileinfo , append = T);
		}
	
	}
	
	if ((sim.cycle % 250) == 0) {
		for(i in 0:(length(pixial)-1)){
			catn(pixial[i]);
			//writing info about density		
			mytextfileinfo = sim.cycle + ","  + asString(ind_den[i])+ "," + asString(pixial[i]);
			writeFile(mytextfile, mytextfileinfo , append = T);
		}
	
	}
	
	if ((sim.cycle % 299) == 0) {
		for(i in 0:(length(pixial)-1)){
			catn(pixial[i]);
			//writing info about density		
			mytextfileinfo = sim.cycle + ","  + asString(ind_den[i])+ "," + asString(pixial[i]);
			writeFile(mytextfile, mytextfileinfo , append = T);
		}
	}
}

s1 late() {
	catn("End of simulation (run time reached)");
	//sim.treeSeqOutput(OUTPATH, metadata=PARAMS);
	sim.simulationFinished();
}



function (void)setupParams(object<Dictionary>$ defaults)
{
	if (!exists("PARAMFILE")) defineConstant("PARAMFILE", "./params.json");
	if (!exists("OUTDIR")) defineConstant("OUTDIR", ".");
	defaults.addKeysAndValuesFrom(Dictionary("PARAMFILE", PARAMFILE, "OUTDIR", OUTDIR));
	
	if (fileExists(PARAMFILE)){
		local_defaults = Dictionary(readFile(PARAMFILE), sep="\n");
		defaults.addKeysAndValuesFrom(local_defaults);
		defaults.setValue("read_from_paramfile", PARAMFILE);
	}
	
	defaults.setValue("OUTBASE", OUTDIR + "/out_" +	defaults.getValue("seed"));
	defaults.setValue("OUTPATH", defaults.getValue("OUTBASE") + ".trees");
	
	for (k in defaults.allKeys) {
		if (!exists(k)) {
			defineConstant(k, defaults.getValue(k));
		}
		else {
			defaults.setValue(k, executeLambda(paste(c(k, ";"), sep='')));
		}
	}
	
	// print out default values
	catn("===========================");
	catn("Model constants: " + defaults.serialize());
	catn("===========================");

}
