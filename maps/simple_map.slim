initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	
	defaults = Dictionary(
		"seed", getSeed(),
		"SD", 0.3, // sigma_D, dispersal distance
		"SX", 0.3, // sigma_X, interaction distance for measuring local density
		"SM", 0.3, // sigma_M, mate choice distance
		"K", 5, // carrying capacity per unit area
		"LIFETIME", 4, // average life span
		"WIDTH", 25.0, // width of the simulated area
		"HEIGHT", 25.0, // height of the simulated area
		"RUNTIME", 300, // total number of ticks to run the simulation for
		"OUTPUTTIME", c(200, 250, 299), // when to save density information
		"L", 1e8, // genome length
		"R", 1e-8, // recombination rate
		"MU", 0, // mutation rate
		// BCH: uppercase for global constants, please
		"min_l", 1.5,
		"max_l", 3.0,
		"image_location", "./practice_maps/mountain_height.png"
		);
	
	// Set up parameters with a user-defined function
	setupParams(defaults);
	
	defineConstant("FECUN", 1 / LIFETIME);
	defineConstant("RHO", FECUN / ((1 + FECUN) * K));
	defineGlobal("PARAMS", defaults);
	
	setSeed(seed);
	
	initializeMutationRate(MU);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(R);
	
	// spatial interaction for local density measure
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3 * SX);
	i1.setInteractionFunction("n", 1, SX);
	// mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3 * SM);
	i2.setInteractionFunction("n", 1, SM);
}

1 first() {
	sim.addSubpop("p1", asInteger(K * WIDTH * HEIGHT));
	p1.setSpatialBounds(c(0, 0, WIDTH, HEIGHT));
	p1.individuals.setSpatialPosition(p1.pointUniform(p1.individualCount));
	
	mapImage = Image(image_location); // adding the image
	map_vals = (1 - mapImage.floatK) * (max_l - min_l) + min_l; // defining values
	map = p1.defineSpatialMap("world", "xy", map_vals, valueRange=c(min_l, max_l), colors=c('#FFFFFF', '#000000'));
	defineConstant("MAP", map);
	
	community.rescheduleScriptBlock(s1, ticks=OUTPUTTIME);
	community.rescheduleScriptBlock(s2, ticks=RUNTIME);
}

first() {
	// preparation for the reproduction() callback
	i2.evaluate(p1);
}

reproduction() {
	mate = i2.drawByStrength(individual, 1);
	if (mate.size())
		offsprings = subpop.addCrossed(individual, mate, count=rpois(1, FECUN));
}

early() {
	// Disperse offspring
	offspring = p1.subsetIndividuals(maxAge = 0);
	pos = offspring.spatialPosition;
	pos = p1.pointDeviated(offspring.size(), pos, "reprising", INF, "n", SD);
	offspring.setSpatialPosition(pos);
	
	// Measure local density and use it for density regulation
	i1.evaluate(p1);
	inds = p1.individuals;
	competition = i1.localPopulationDensity(inds);
	local_l = MAP.mapValue(inds.spatialPosition);
	inds.fitnessScaling = 1 / (1 + (RHO * competition / local_l));
}

late() {
	if (p1.individualCount == 0) {
		catn("Population went extinct! Ending the simulation.");
		sim.simulationFinished();
	}
	
	// BCH: Why is this here?  If it is just for the benefit of the s1 late() event below, then just do it there.
	i1.evaluate(p1);
}

s1 late() {
	// Output density and relative map value of each individual (between 0 and 1)
	inds = p1.individuals;
	
	ind_den = i1.localPopulationDensity(inds);
	local_l = MAP.mapValue(inds.spatialPosition);
	pixial = (local_l - min_l) / (max_l - min_l);
	
	// printing out information at selected ticks
	mytextfile = OUTBASE + "_by_ind_Ind_values_max_" + max_l + "_min_l_" + min_l + "_.text";
	mytextfileinfo = NULL;
	// BCH: for this pattern use "for (i in seqLen(pixial))"
	for (i in 0:(length(pixial) - 1)) {
		catn(pixial[i]);
		// BCH: the comment below is a bit vague, and it isn't really clear to me what we're writing here and why.
		// Part of the problem is that I'm not sure what the variable name "pixial" means...?  Or "local_l" for that matter?
		// So less cryptic variable names would be helpful for code legibility.
		// writing info about density		
		// BCH: I don't think the paste0() call does anything; what is passed to it is already a singleton string, no?
		mytextfileinfo = c(mytextfileinfo, paste0(sim.cycle + "," + ind_den[i] + "," + pixial[i]));
	}
	writeFile(mytextfile, mytextfileinfo, append=T);
}

s2 late() {
	catn("End of simulation (run time reached)");
	sim.simulationFinished();
}



function (void)setupParams(object<Dictionary>$ defaults)
{
	if (!exists("PARAMFILE")) defineConstant("PARAMFILE", "./params.json");
	if (!exists("OUTDIR")) defineConstant("OUTDIR", ".");
	defaults.addKeysAndValuesFrom(Dictionary("PARAMFILE", PARAMFILE, "OUTDIR", OUTDIR));
	
	if (fileExists(PARAMFILE)){
		local_defaults = Dictionary(readFile(PARAMFILE), sep="\n");
		defaults.addKeysAndValuesFrom(local_defaults);
		defaults.setValue("read_from_paramfile", PARAMFILE);
	}
	
	defaults.setValue("OUTBASE", OUTDIR + "/out_" +	defaults.getValue("seed"));
	
	for (k in defaults.allKeys) {
		if (!exists(k)) {
			defineConstant(k, defaults.getValue(k));
		}
		else {
			defaults.setValue(k, executeLambda(paste(c(k, ";"), sep='')));
		}
	}
	
	// print out default values
	catn("===========================");
	catn("Model constants: " + defaults.serialize());
	catn("===========================");
	// BCH: The blank line below should be removed; but more, it makes me worry that this code has not
	// simply been copy-pasted from minimal.slim.  I'd suggest re-copying once minimal.slim is final.

}
